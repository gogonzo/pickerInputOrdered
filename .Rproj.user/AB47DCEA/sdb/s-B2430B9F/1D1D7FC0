{
    "collab_server" : "",
    "contents" : "#' @title Change the value of a select picker input on the client\n#'\n#' @description\n#' Change the value of a picker input on the client\n#'\n#' @param session The session object passed to function given to shinyServer.\n#' @param inputId\tThe id of the input object.\n#' @param label Display a text in the center of the switch.\n#' @param choices List of values to select from. If elements of the list are named\n#' then that name rather than the value is displayed to the user.\n#' @param selected The new selected value (or multiple values if \\code{multiple = TRUE}).\n#'  To reset selected value, in case of multiple picker, use \\code{character(0)}.\n#' @param choicesOpt Options for choices in the dropdown menu.\n#' @param options Options for the picker via \\code{\\link{pickerOptions}}.\n#' @param clearOptions Clear previous options, otherwise the ones set previously are still active.\n#'\n#' @seealso \\link{pickerInput}.\n#'\n#' @export\n#'\n#' @examples\n#' if (interactive()) {\n#'\n#' library(\"shiny\")\n#' library(\"shinyWidgets\")\n#'\n#' ui <- fluidPage(\n#'   tags$h2(\"Update pickerInput\"),\n#'\n#'   fluidRow(\n#'     column(\n#'       width = 5, offset = 1,\n#'       pickerInput(\n#'         inputId = \"p1\",\n#'         label = \"classic update\",\n#'         choices = rownames(mtcars)\n#'       )\n#'     ),\n#'     column(\n#'       width = 5,\n#'       pickerInput(\n#'         inputId = \"p2\",\n#'         label = \"disabled update\",\n#'         choices = rownames(mtcars)\n#'       )\n#'     )\n#'   ),\n#'\n#'   fluidRow(\n#'     column(\n#'       width = 10, offset = 1,\n#'       sliderInput(\n#'         inputId = \"up\",\n#'         label = \"Select between models with mpg greater than :\",\n#'         width = \"50%\",\n#'         min = min(mtcars$mpg),\n#'         max = max(mtcars$mpg),\n#'         value = min(mtcars$mpg),\n#'         step = 0.1\n#'       )\n#'     )\n#'   )\n#'\n#' )\n#'\n#' server <- function(input, output, session) {\n#'\n#'   observeEvent(input$up, {\n#'     mtcars2 <- mtcars[mtcars$mpg >= input$up, ]\n#'\n#'     # Method 1\n#'     updatePickerInput(session = session, inputId = \"p1\",\n#'                       choices = rownames(mtcars2))\n#'\n#'     # Method 2\n#'     disabled_choices <- !rownames(mtcars) %in% rownames(mtcars2)\n#'     updatePickerInput(\n#'       session = session, inputId = \"p2\",\n#'       choices = rownames(mtcars),\n#'       choicesOpt = list(\n#'         disabled = disabled_choices,\n#'         style = ifelse(disabled_choices,\n#'                        yes = \"color: rgba(119, 119, 119, 0.5);\",\n#'                        no = \"\")\n#'       )\n#'     )\n#'   }, ignoreInit = TRUE)\n#'\n#' }\n#'\n#' shinyApp(ui = ui, server = server)\n#'\n#' }\nupdatePickerInput <- function (session,\n                               inputId,\n                               label = NULL,\n                               selected = NULL,\n                               choices = NULL,\n                               choicesOpt = NULL,\n                               options = NULL,\n                               clearOptions = FALSE) {\n  choices <- if (!is.null(choices))\n    choicesWithNames(choices)\n  if (!is.null(selected))\n    selected <- validateSelected(selected, choices, inputId)\n  choices <- if (!is.null(choices))\n    as.character(pickerSelectOptions(choices, selected, choicesOpt))\n  message <- dropNulls(list(\n    label = label,\n    choices = choices,\n    value = selected,\n    options = options,\n    clearOptions = isTRUE(clearOptions)\n  ))\n  session$sendInputMessage(inputId, message)\n}\n\ndropNulls <- function(x) {\n  x[!vapply(x, is.null, FUN.VALUE = logical(1))]\n}\n\n\n\n\n#' Generate pickerInput options\n#'\n#' @param choices a named list\n#' @param selected selected value if any\n#' @param choicesOpt additional option ofr choices\n#'\n#' @importFrom htmltools HTML htmlEscape tagList tags\n#'\n#' @noRd\npickerSelectOptions <- function(choices, selected = NULL, choicesOpt = NULL, maxOptGroup = NULL) {\n  if (is.null(choicesOpt) & is.null(maxOptGroup)) {\n    return(selectOptions(choices, selected))\n  }\n  if (is.null(choicesOpt))\n    choicesOpt <- list()\n  l <- sapply(choices, length)\n  if (!is.null(maxOptGroup))\n    maxOptGroup <- rep_len(x = maxOptGroup, length.out = sum(l))\n  m <- matrix(data = c(c(1, cumsum(l)[-length(l)] + 1), cumsum(l)), ncol = 2)\n  html <- lapply(seq_along(choices), FUN = function(i) {\n    label <- names(choices)[i]\n    choice <- choices[[i]]\n    if (is.list(choice)) {\n      tags$optgroup(\n        label = htmlEscape(label, TRUE),\n        `data-max-options` = if (!is.null(maxOptGroup)) maxOptGroup[i],\n        pickerSelectOptions(\n          choice, selected,\n          choicesOpt = lapply(\n            X = choicesOpt,\n            FUN = function(j) {\n              j[m[i, 1]:m[i, 2]]\n            }\n          )\n        )\n      )\n    } else {\n      tags$option(\n        value = choice,\n        HTML(htmltools::htmlEscape(label)),\n        style = choicesOpt$style[i],\n        `data-icon` = choicesOpt$icon[i],\n        `data-subtext` = choicesOpt$subtext[i],\n        `data-content` = choicesOpt$content[i],\n        `data-tokens` = choicesOpt$tokens[i],\n        disabled = if (!is.null(choicesOpt$disabled[i]) && choicesOpt$disabled[i]) \"disabled\",\n        selected = if (choice %in% selected) \"selected\" else NULL\n      )\n    }\n  })\n  return(tagList(html))\n}\n\n# From shiny/input-select.R, faster alternative if no choice options specific to picker\nselectOptions <- function(choices, selected = NULL) {\n  html <- mapply(choices, names(choices), FUN = function(choice, label) {\n    if (is.list(choice)) {\n      sprintf(\n        '<optgroup label=\"%s\">\\n%s\\n</optgroup>',\n        htmlEscape(label, TRUE),\n        selectOptions(choice, selected)\n      )\n\n    } else {\n      sprintf(\n        '<option value=\"%s\"%s>%s</option>',\n        htmlEscape(choice, TRUE),\n        if (choice %in% selected) ' selected' else '',\n        htmlEscape(label)\n      )\n    }\n  })\n  HTML(paste(html, collapse = '\\n'))\n}\n\n\n",
    "created" : 1637339044516.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3728074858",
    "id" : "1D1D7FC0",
    "lastKnownWriteTime" : 1637339335,
    "last_content_update" : 1637339335777,
    "path" : "~/nest/pickerInputOrdered/R/opts.R",
    "project_path" : "R/opts.R",
    "properties" : {
        "docOutlineVisible" : "1",
        "marks" : "<:163,13\n>:163,15",
        "tempName" : "Untitled2"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}